## learn more about nginx reverse proxy configuration here:
## https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
worker_processes 1;
events { worker_connections 1024; }

http {
    sendfile on;
    large_client_header_buffers 4 32k;

    # Here, "identity" refers to just a meaningful name. This can be anything that reflects the application to which
    # you want to send some traffic. The definition for this upstream refers to a specific server and the name of The
    # server should match the service name defined in docker-compose.yml file along with the port that the container is
    # listening on. The port number should NOT be the host port, but the container port.
    # "globomantics.identityserver" should be exactly the name of the identity service in the docker-compose.yml file.
    upstream identity {
        # [FORME: Got "globomantics.identityserver" name from "docker-compose.yml" -> service name under "services" node.
        # Got 5000 port under ports section]
        server globomantics.identityserver:5000;
    }
    
    # Represents the server node.
    server {
        # Defines the port that Nginx is listening on
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/id-local.globomantics.com.crt;
        ssl_certificate_key /etc/ssl/private/id-local.globomantics.com.key;
        
        # Defines a DNS name that it will be looking for. Author made this "id-local.globomantics.com" for IdentityServer.
        # This could be whatever you want to use for the DNS name of your website.
        server_name id-local.globomantics.com;        
        
        # Represents the location node. Here "location /" basically matches any path under id-local.globomantics.com.
        # This will just match up all web paths under that DNS name.
        location / {
            # When it finds a web request that's hitting a matched path, it will use the "proxy_pass" entry to forward traffic.
            # The name "identity" here needs to match the upstream name defined (defined above) for our IdentityServer.
            proxy_pass         http://identity;
            # The rest of this configuration is fairly boilerplate, but important to send along information about the original
            # request here within Nginx to the IdentityServer. It forwards information about the originally requested 
            # host name and source IP address and more.
            proxy_redirect     off;
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            # To make sure that the host port gets passed along to our ASP.NET Application,
            # When we set the header for the host, we can add a port that's the host port that we've exposed for NGINX, 5200 in this case
            proxy_set_header   Host $host:44395;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_buffer_size           128k;
            proxy_buffers               4 256k;
            proxy_busy_buffers_size     256k;
        }
    }   
}